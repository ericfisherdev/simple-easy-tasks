name: Commit Message Lint

on:
  pull_request:
    branches: [ develop, release, main ]
    types: [opened, synchronize, reopened, edited]
  push:
    branches: [ develop, release, main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  commitlint:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for proper commit range detection
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint commit messages (PR)
      if: github.event_name == 'pull_request'
      run: |
        # Get the base and head SHA for PR
        BASE_SHA=${{ github.event.pull_request.base.sha }}
        HEAD_SHA=${{ github.event.pull_request.head.sha }}
        
        echo "Linting commits from $BASE_SHA to $HEAD_SHA"
        
        # Lint all commits in the PR
        npx commitlint --from $BASE_SHA --to $HEAD_SHA --verbose

    - name: Lint commit messages (Push)
      if: github.event_name == 'push'
      run: |
        # For push events, check the last commit
        echo "Linting last commit: ${{ github.sha }}"
        npx commitlint --from HEAD~1 --to HEAD --verbose

    - name: Validate commit message format
      if: always()
      run: |
        echo "‚ÑπÔ∏è Commit Message Guidelines:"
        echo ""
        echo "üìã Format: <type>[optional scope]: <description>"
        echo ""
        echo "üè∑Ô∏è Types:"
        echo "  ‚Ä¢ feat:     ‚ú® A new feature"
        echo "  ‚Ä¢ fix:      üêõ A bug fix" 
        echo "  ‚Ä¢ docs:     üìö Documentation only changes"
        echo "  ‚Ä¢ style:    üíÑ Code style changes (formatting, etc)"
        echo "  ‚Ä¢ refactor: ‚ôªÔ∏è  Code change that neither fixes a bug nor adds a feature"
        echo "  ‚Ä¢ perf:     ‚ö° Performance improvements"
        echo "  ‚Ä¢ test:     üß™ Adding missing tests or correcting existing tests"
        echo "  ‚Ä¢ build:    üì¶ Changes affecting build system or dependencies"
        echo "  ‚Ä¢ ci:       üë∑ Changes to CI configuration files and scripts"
        echo "  ‚Ä¢ chore:    üîß Other changes that don't modify src or test files"
        echo "  ‚Ä¢ revert:   ‚è™ Reverts a previous commit"
        echo ""
        echo "üîç Scopes (optional):"
        echo "  ‚Ä¢ api, handlers, middleware, auth, validation"
        echo "  ‚Ä¢ db, repository, migrations, collections"
        echo "  ‚Ä¢ domain, services, models"
        echo "  ‚Ä¢ config, container, logging, monitoring"
        echo "  ‚Ä¢ tests, integration, unit, e2e"
        echo "  ‚Ä¢ ci, docker, deployment, scripts"
        echo "  ‚Ä¢ docs, readme, changelog"
        echo "  ‚Ä¢ tasks, projects, users, comments"
        echo ""
        echo "‚úÖ Examples:"
        echo "  ‚Ä¢ feat(api): add user authentication endpoint"
        echo "  ‚Ä¢ fix(db): resolve connection pool exhaustion"
        echo "  ‚Ä¢ docs: update API documentation"
        echo "  ‚Ä¢ test(integration): add user repository tests"
        echo "  ‚Ä¢ ci: add commitlint workflow"

  # Validate PR title follows conventional commits (optional)
  validate-pr-title:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate PR title
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "Validating PR title: $PR_TITLE"
        
        # Use commitlint to validate PR title
        echo "$PR_TITLE" | npx commitlint --verbose

    - name: Comment on PR if title is invalid
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const comment = `## ‚ùå PR Title Validation Failed
            
            Your PR title does not follow the Conventional Commits format.
            
            **Current title:** \`${{ github.event.pull_request.title }}\`
            
            **Expected format:** \`<type>[optional scope]: <description>\`
            
            **Examples:**
            - \`feat(api): add user authentication endpoint\`
            - \`fix(db): resolve connection pool exhaustion\`
            - \`docs: update API documentation\`
            - \`test(integration): add user repository tests\`
            
            Please update your PR title to follow this format.
            
            üìñ [Learn more about Conventional Commits](https://conventionalcommits.org/)`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not create PR comment (insufficient permissions):', error.message);
          }

  # Security check for commit content
  security-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for sensitive information in commits
      run: |
        echo "üîç Scanning commits for sensitive information..."
        
        # Check commit messages and diffs for actual secrets (not patterns or test data)
        RANGE="HEAD~10..HEAD"
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          RANGE="${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}"
        fi
        
        echo "Checking commit range: $RANGE"
        
        VIOLATIONS=0
        
        # Check for actual private keys (not references to them)
        if git diff $RANGE | grep -E "^[\+][^-]*-----BEGIN [A-Z]* PRIVATE KEY-----"; then
          echo "‚ö†Ô∏è  Found actual private key in commit diff"
          VIOLATIONS=$((VIOLATIONS + 1))
        fi
        
        # Check for actual SSH keys (not references)
        if git diff $RANGE | grep -E "^[\+][^-]*(ssh-rsa|ssh-ed25519) [A-Za-z0-9+/]{50,}"; then
          echo "‚ö†Ô∏è  Found actual SSH key in commit diff"
          VIOLATIONS=$((VIOLATIONS + 1))
        fi
        
        # Check for actual secrets in .env files (not template examples)
        if git diff $RANGE | grep -E "^[\+][^-]*[A-Z_]+(SECRET|KEY|TOKEN|PASSWORD)=[^=].{10,}" | grep -v "your-super-secret\|example\|template\|CHANGE_ME\|REPLACE_WITH"; then
          echo "‚ö†Ô∏è  Found potential actual secret value in commit diff"
          VIOLATIONS=$((VIOLATIONS + 1))
        fi
        
        # Check for hardcoded database URLs with credentials
        if git diff $RANGE | grep -E "^[\+][^-]*[a-z]+://[^@\s]+:[^@\s]+@[^/\s]+" | grep -v "username:password\|user:pass\|example\|localhost"; then
          echo "‚ö†Ô∏è  Found potential database URL with credentials in commit diff"
          VIOLATIONS=$((VIOLATIONS + 1))
        fi
        
        if [ $VIOLATIONS -gt 0 ]; then
          echo ""
          echo "‚ùå Found $VIOLATIONS potential security violations!"
          echo "Please review your commits and remove any sensitive information."
          echo "Consider using environment variables or secure secret management."
          exit 1
        else
          echo "‚úÖ No sensitive information detected in commits."
        fi